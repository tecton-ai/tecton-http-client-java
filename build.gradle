plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.gradleup.nmcp' version '1.0.1'
}

group 'ai.tecton'
version = findProperty('version')
repositories {
    mavenCentral()
}

sourceCompatibility = 8
targetCompatibility = 8

// Project dependencies
dependencies {
    // OkHttp Client included as an API dependency because it is present in the public API of this library.
    api group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.10.0'

    // Moshi JSON Parsing Library
    implementation group: 'com.squareup.moshi', name: 'moshi', version: '1.13.0'
    // Moshi JSON Adapter Library for Standard Java Types
    implementation group: 'com.squareup.moshi', name: 'moshi-adapters', version: '1.13.0'
    // StringUtils and Validation checks
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    // Collection operations such as Partition and Parallel Streams
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    // JUnit tests
    testImplementation 'junit:junit:4.13.2'
    // Mock Server for OkHttp Testing
    testImplementation("com.squareup.okhttp3:mockwebserver:4.10.0")
    // Mockito for mock tests
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.3.1'
}

task generateVersionFile {
    def outputDir = file("$buildDir/generated-src/ai.tecton.client.version")
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        def versionFile = new File(outputDir, "Version.java")
        versionFile.text = """// Generated by a task defined in build.gradle. Do not modify this file directly.

package ai.tecton.client.version;

public class Version {
  public static final String VERSION = "${project.version}";
}
"""
    }
}

sourceSets.main.java.srcDir "$buildDir/generated-src/ai.tecton.client.version"

compileJava.dependsOn generateVersionFile

// Run tests during build and output status
test {
    useJUnit()
    testLogging {
        showStandardStreams = true
        events = [TestLogEvent.FAILED,
                  TestLogEvent.PASSED,
                  TestLogEvent.SKIPPED,
                  TestLogEvent.STANDARD_OUT]
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    dependsOn(generateVersionFile)
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Configure publishing for Central Portal
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Tecton Java Client'
                artifactId = 'java-client'
                packaging = 'jar'
                description = 'A Java Client Library for Tecton Online Feature Store'
                url = 'https://github.com/tecton-ai/tecton-http-client-java'

                scm {
                    connection = 'scm:git:git@github.com:tecton-ai/tecton-http-client-java.git'
                    developerConnection = 'scm:git:git@github.com:tecton-ai/tecton-http-client-java.git'
                    url = 'https://github.com/tecton-ai/tecton-http-client-java'
                }

                developers {
                    developer {
                        name = 'PlatEng-RSS'
                        email = 'plateng-rss-team@tecton.ai'
                        organization = 'Tecton'
                        organizationUrl = 'https://www.tecton.ai/'
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
}

// Configure signing
signing {
    def signingKey = System.getenv('CLIENT_GPG_KEY')
    def signingPassword = System.getenv('CLIENT_GPG_PASSPHRASE')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}

// Configure New Maven Central Publishing (NMCP) plugin for Central Portal
nmcp {
    publishingType = "AUTOMATIC"
    username = findProperty('centralPortal.username') ?: System.getenv('CENTRAL_PORTAL_USERNAME')
    password = findProperty('centralPortal.password') ?: System.getenv('CENTRAL_PORTAL_PASSWORD')
}
