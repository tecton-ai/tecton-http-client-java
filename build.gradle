import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'application'
}

group 'ai.tecton'
version = findProperty('version')
repositories {
    mavenCentral()
}

sourceCompatibility = 8
targetCompatibility = 8

//Project dependencies
dependencies {
    //OkHttp Client
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.3'
    //Moshi JSON Parsing Library
    implementation group: 'com.squareup.moshi', name: 'moshi', version: '1.9.3'
    //Moshi JSON Adapter Library for Standard Java Types
    implementation group: 'com.squareup.moshi', name: 'moshi-adapters', version: '1.9.3'
    //StringUtils and Validation checks
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    //JUnit tests
    testImplementation 'junit:junit:4.13.2'
    //Mock Server for OkHttp Testing
    testImplementation("com.squareup.okhttp3:mockwebserver:4.10.0")
}

//Package JAR with dependencies
jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//Run tests during build and output status
test {
    useJUnit()
    testLogging {
        showStandardStreams = true
        events = [TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT]
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true

    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//Publish JAR to Nexus
publishing {
    repositories {
        maven {
            credentials {
                username = findProperty('ossrh.username')
                password = System.getenv('OSSRH_TOKEN')
            }
            if (version.endsWith('-SNAPSHOT')) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Tecton Java Client'
                artifactId = 'java-client'
                packaging = 'jar'
                description = 'A Java Client Library for Tecton Online Feature Store'
                url = 'https://github.com/tecton-ai/tecton-http-client-java'

                scm {
                    connection = 'scm:git:git@github.com:tecton-ai/tecton-http-client-java.git'
                    developerConnection = 'scm:git:git@github.com:tecton-ai/tecton-http-client-java.git'
                    url = 'https://github.com/tecton-ai/tecton-http-client-java'
                }

                developers {
                    developer {
                        name = 'PlatEng-RSS'
                        email = 'plateng-rss-team@tecton.ai'
                        organization = 'Tecton'
                        organizationUrl = 'https://www.tecton.ai/'

                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
}

signing {
    def signingKey = System.getenv('CLIENT_GPG_KEY')
    def signingPassword = System.getenv('CLIENT_GPG_PASSPHRASE')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

task runBenchmarkTest(type: Exec) {
    def arg1 = findProperty("benchmarkUrl")
    def arg2 = findProperty("apiKey")
    def arg3 = findProperty("numUsers")
    def arg4 = findProperty("qps")
    def arg5 = findProperty("durationInSeconds")
    group = "Execution"
    description = "Run BenchmarkRunner main class"
    def mainClass = "ai.tecton.client.transport.benchmark.BenchMarkRunner"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), mainClass, arg1, arg2, arg3, arg4, arg5
}
